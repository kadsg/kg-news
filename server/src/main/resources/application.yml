server:
  port: 8080

debug: true


logging:
  level:
    org:
      springframework:
        web: DEBUG
        cache: DEBUG
        hibernate:
          sql: DEBUG
          com:
            jdbc:
              binding: DEBUG

spring:
  application:
    name: kg-news
  profiles:
    active: dev

  output:
    ansi:
      enabled: always

  mvc:
    log-request-details: true

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true

  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: ${kg.datasource.driver-class-name}
    url: jdbc:mysql://${kg.datasource.host}:${kg.datasource.port}/${kg.datasource.database}?createDatabaseIfNotExist=true&ifNotExist=true&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
    username: ${kg.datasource.username}
    password: ${kg.datasource.password}

  data:
    redis:
      host: ${kg.redis.host}
      port: ${kg.redis.port}
      password: ${kg.redis.password}
      database: ${kg.redis.database}
      lettuce:
        pool:
          max-active: ${kg.redis.lettuce.pool.max-active}
          max-wait: ${kg.redis.lettuce.pool.max-wait}
          max-idle: ${kg.redis.lettuce.pool.max-idle}
          min-idle: ${kg.redis.lettuce.pool.min-idle}
          time-between-eviction-runs: ${kg.redis.lettuce.pool.time-between-eviction-runs}

  kafka:
    bootstrap-servers: ${kg.kafka.server}
    producer:
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: ${spring.application.name}
      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      auto-offset-reset: earliest
      # 设置自动提交offset
      enable-auto-commit: false
      max-poll-records: 2
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer


kg:
  jwt:
    secret-key: ${kg.jwt.secret-key}
    ttl: ${kg.jwt.ttl}
    token-name: ${kg.jwt.token-name}

  oss:
    domain: ${kg.oss.domain}
    access-key: ${kg.oss.access-key}
    secret-key: ${kg.oss.secret-key}
    bucket: ${kg.oss.bucket}


mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
